meta:
  aws:
    backup_bucket: ~
    access_key_id: ~
    secret_access_key: ~
    availability_zone: ~
    availability_zone2: ~
    default_region: ~
  collectd:
    riemann_server: ~
  environment: ~
  grafana:
    url: ~
    user: ~
    pass: ~
    auth:
      github:
        client_id: ~
        client_secret: ~
        allowed_organizations: ~
        team_ids: ~
  influxdb:
    name: ~
    user: ~
    password: ~
    database: ~
    retention: ~
  riemann:
    pagerduty_api_key: ~
    platform_logs_threshold: ~
    app_logs_threshold: ~
    rds_cpu_threshold: ~
  network:
    range: ~
    reserved: ~
    static: ~
    dns: ~
    gateway: ~
    subnet: ~
    security_groups: ~
  elbs: ~

releases:
- name: grafana
  version: latest
- name: influxdb
  version: latest
- name: riemann
  version: latest
- name: collectd
  version: latest
- name: encrypt-blobstore
  version: latest
- name: fisma
  version: latest
- name: tripwire
  version: latest
- name: awslogs
  version: latest
- name: nessus-agent
  version: latest
- name: newrelic
  version: latest
- name: riemannc
  version: latest
- name: clamav
  version: latest
- name: snort
  version: latest

networks:
- name: monitoring
  type: manual
  subnets:
  - range: (( grab meta.network.range ))
    reserved: (( grab meta.network.reserved ))
    gateway: (( grab meta.network.gateway ))
    dns: (( grab meta.network.dns ))
    static: (( grab meta.network.static ))
    cloud_properties:
      security_groups: (( grab meta.network.security_groups ))
      subnet: (( grab meta.network.subnet ))

jobs:
- name: monitoring
  templates:
  - {name: grafana, release: grafana}
  - {name: riemann, release: riemann}
  - {name: riemann-checkawslogs, release: riemann}
  - {name: encrypt-blobstore, release: encrypt-blobstore}
  - {name: harden, release: fisma}
  - {name: tripwire, release: tripwire}
  - {name: awslogs, release: awslogs}
  - {name: nessus-agent, release: nessus-agent}
  - {name: newrelic-monitor, release: newrelic}
  - {name: riemannc, release: riemannc}
  - {name: clamav, release: clamav}
  - {name: snort, release: snort}

  instances: 1
  resource_pool: riemann_z1
  persistent_disk_pool: riemann
  networks:
  - name: monitoring
    static_ips: (( static_ips(0) ))

- name: influxdb
  templates:
  - {name: influxdb, release: influxdb}
  - {name: collectd, release: collectd}
  - {name: harden, release: fisma}
  - {name: tripwire, release: tripwire}
  - {name: awslogs, release: awslogs}
  - {name: nessus-agent, release: nessus-agent}
  - {name: newrelic-monitor, release: newrelic}
  - {name: riemannc, release: riemannc}
  - {name: clamav, release: clamav}

  instances: 1
  resource_pool: xlarge_z1
  persistent_disk_pool: influxdb
  networks:
  - name: monitoring
    static_ips: (( static_ips(1) ))

properties:
  collectd:
    hostname_prefix: (( grab meta.environment "." ))
    riemann_server: (( grab meta.collectd.riemann_server ))
  encrypt-blobstore:
    buckets: (( param "please set encrypt-blobstore buckets" ))
    access_key: (( meta.aws.access_key_id  ))
    secret_access_key: (( meta.aws.secret_access_key  ))
    default_region: (( meta.aws.default_region  ))
  grafana:
    admin_username: (( grab meta.grafana.user ))
    admin_password: (( grab meta.grafana.pass ))
    listen_port: 3000
    root_url: (( grab meta.grafana.url ))
    auth:
      github:
        enabled: true
        client_id: (( grab meta.grafana.auth.github.client_id ))
        client_secret: (( grab meta.grafana.auth.github.client_secret ))
        allowed_sign_up: true
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        team_ids: (( grab meta.grafana.auth.github.team_ids ))
        allowed_organizations: (( grab meta.grafana.auth.github.allowed_organizations ))
    datasources:
    - type: "influxdb"
      database: (( grab meta.influxdb.database ))
      url: (( concat "http://" jobs.influxdb.networks.monitoring.static_ips.[0] ":8086" ))
      name: (( grab meta.influxdb.name ))
      user: (( grab meta.influxdb.user ))
      password: (( grab meta.influxdb.password ))
      isDefault: true
    dashboards:
    - name: all-in-one-cf-components-dashboard
      content: (( file "dashboards/all-in-one-cf-components-dashboard.json" ))
    - name: cloud-controller
      content: (( file "dashboards/cloud-controller.json" ))
    - name: dea
      content: (( file "dashboards/dea.json" ))
    - name: diego
      content: (( file "dashboards/diego.json" ))
    - name: doppler-server
      content: (( file "dashboards/doppler-server.json" ))
    - name: gorouter
      content: (( file "dashboards/gorouter.json" ))
    - name: metron-agent
      content: (( file "dashboards/metron-agent.json" ))
    - name: syslog
      content: (( file "dashboards/syslog.json" ))
    - name: traffic-controller
      content: (( file "dashboards/traffic-controller.json" ))
    - name: uaa
      content: (( file "dashboards/uaa.json" ))
    - name: etcd
      content: (( file "dashboards/etcd.json" ))
    - name: atypical
      content: (( file "dashboards/atypical.json" ))
    - name: k8s-cluster
      content: (( file "dashboards-tmp/cluster.json" ))
    - name: k8s-pods
      content: (( file "dashboards-tmp/pods.json" ))

  influxdb:
    database: (( grab meta.influxdb.database ))
    user: (( grab meta.influxdb.user ))
    password: (( grab meta.influxdb.password ))
    retention: (( grab meta.influxdb.retention ))
  riemann:
    server: (( grab properties.collectd.riemann_server ))
    port: 5555
    pagerduty_api_key: (( grab meta.riemann.pagerduty_api_key ))
    swap:
      critical: 25
      warn: 10
    disk:
      critical: 75
      warn: 70
    influxdb:
      host: (( grab jobs.influxdb.networks.monitoring.static_ips.[0] ))
      username: (( grab meta.influxdb.user ))
      password: (( grab meta.influxdb.password ))
      port: 8086
      database: (( grab meta.influxdb.database ))
    logsearch:
      platform_logs_threshold: (( grab meta.riemann.platform_logs_threshold ))
      app_logs_threshold: (( grab meta.riemann.app_logs_threshold ))
    rds:
      cpu_threshold: (( grab meta.riemann.rds_cpu_threshold ))
  tripwire: ~
  awslogs: ~
  nessus-agent: ~
  newrelic: ~

resource_pools:
- name: riemann_z1
  network: monitoring
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: latest
  cloud_properties:
    iam_instance_profile: check-awslogs
    instance_type: t2.medium
    elbs: (( grab meta.elbs ))
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    availability_zone: (( grab meta.aws.availability_zone ))
- name: xlarge_z1
  network: monitoring
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: latest
  cloud_properties:
    iam_instance_profile: influxdb-archive
    instance_type: m3.2xlarge
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    availability_zone: (( grab meta.aws.availability_zone ))

disk_pools:
- name: riemann
  disk_size: 30_000
  cloud_properties:
    encrypted: true
- name: influxdb
  disk_size: 500_000
  cloud_properties:
    encrypted: true

compilation:
  network: monitoring
  reuse_compilation_vms: true
  workers: 4
  cloud_properties:
    instance_type: m3.xlarge
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    availability_zone: (( grab meta.aws.availability_zone ))

update:
  canaries: 1
  canary_watch_time: 1000-300000
  max_in_flight: 50
  serial: false
  update_watch_time: 1000-300000
