releases:
- name: grafana
  version: latest
- name: influxdb
  version: latest
- name: riemann
  version: latest
- name: collectd
  version: latest
- name: encrypt-blobstore
  version: latest
- name: fisma
  version: latest
- name: tripwire
  version: latest
- name: awslogs
  version: latest
- name: nessus-agent
  version: latest
- name: newrelic
  version: latest
- name: riemannc
  version: latest
- name: clamav
  version: latest
- name: snort
  version: latest
- name: cron
  version: latest

networks:
- name: monitoring
  type: manual
  subnets:
  - cloud_properties:
      subnet: (( grab meta.subnet ))
      security_groups:
      - (( grab meta.security_group ))

jobs:
- name: monitoring
  templates:
  - {name: grafana, release: grafana}
  - {name: riemann, release: riemann}
  - {name: riemann-checkawslogs, release: riemann}
  - {name: encrypt-blobstore, release: encrypt-blobstore}
  - {name: harden, release: fisma}
  - {name: tripwire, release: tripwire}
  - {name: awslogs, release: awslogs}
  - {name: nessus-agent, release: nessus-agent}
  - {name: newrelic-monitor, release: newrelic}
  - {name: riemannc, release: riemannc}
  - {name: clamav, release: clamav}
  - {name: snort, release: snort}

  instances: 1
  resource_pool: riemann_z1
  persistent_disk_pool: riemann
  networks:
  - name: monitoring
    static_ips: (( static_ips(0) ))

- name: influxdb
  templates:
  - {name: influxdb, release: influxdb}
  - {name: collectd, release: collectd}
  - {name: harden, release: fisma}
  - {name: tripwire, release: tripwire}
  - {name: awslogs, release: awslogs}
  - {name: nessus-agent, release: nessus-agent}
  - {name: newrelic-monitor, release: newrelic}
  - {name: riemannc, release: riemannc}
  - {name: clamav, release: clamav}
  - {name: cron, release: cron}

  instances: 1
  resource_pool: xlarge_z1
  persistent_disk_pool: influxdb
  networks:
  - name: monitoring
    static_ips: (( static_ips(1) ))

properties:
  cron:
    variables:
      AWS_DEFAULT_REGION: (( grab properties.aws.default_region ))
      S3_BUCKET_NAME: (( grab meta.influxdb_bucket_name ))
      INFLUX_DB_NAME: (( grab properties.influxdb.database ))
    entries:
    - script:
        name: influx_backup.sh
        contents: (( file "cronjobs/influx_backup.sh" ))
      minute: 0
      hour: 0
      day: '*'
      month: '*'
      wday: '*'
      user: root
  grafana:
    listen_port: 3000
    auth:
      github:
        enabled: true
        allowed_sign_up: true
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
    datasources:
    - type: "influxdb"
      database: (( grab properties.influxdb.database ))
      url: (( concat "http://" jobs.influxdb.networks.monitoring.static_ips.[0] ":8086" ))
      name: (( grab properties.influxdb.name ))
      user: (( grab properties.influxdb.user ))
      password: (( grab properties.influxdb.password ))
      isDefault: true
    dashboards:
    - name: all-in-one-cf-components-dashboard
      content: (( file "dashboards/all-in-one-cf-components-dashboard.json" ))
    - name: cloud-controller
      content: (( file "dashboards/cloud-controller.json" ))
    - name: dea
      content: (( file "dashboards/dea.json" ))
    - name: diego
      content: (( file "dashboards/diego.json" ))
    - name: doppler-server
      content: (( file "dashboards/doppler-server.json" ))
    - name: gorouter
      content: (( file "dashboards/gorouter.json" ))
    - name: metron-agent
      content: (( file "dashboards/metron-agent.json" ))
    - name: syslog
      content: (( file "dashboards/syslog.json" ))
    - name: traffic-controller
      content: (( file "dashboards/traffic-controller.json" ))
    - name: uaa
      content: (( file "dashboards/uaa.json" ))
    - name: etcd
      content: (( file "dashboards/etcd.json" ))
    - name: concourse
      content: (( file "dashboards/concourse.json" ))
    - name: atypical
      content: (( file "dashboards/atypical.json" ))
    - name: k8s-cluster
      content: (( file "dashboards-tmp/cluster.json" ))
    - name: k8s-pods
      content: (( file "dashboards-tmp/pods.json" ))

  riemann:
    server: (( grab properties.collectd.riemann_server ))
    port: 5555
    swap:
      critical: 25
      warn: 10
    disk:
      critical: 75
      warn: 70
    influxdb:
      host: (( grab jobs.influxdb.networks.monitoring.static_ips.[0] ))
      username: (( grab properties.influxdb.user ))
      password: (( grab properties.influxdb.password ))
      database: (( grab properties.influxdb.database ))
      port: 8086

resource_pools:
- name: riemann_z1
  network: monitoring
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: latest
  cloud_properties:
    iam_instance_profile: check-awslogs
    instance_type: t2.medium
    elbs:
    - (( grab meta.elb_name ))
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    availability_zone: (( grab properties.aws.availability_zone ))
- name: xlarge_z1
  network: monitoring
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: latest
  cloud_properties:
    iam_instance_profile: influxdb-archive
    instance_type: m3.2xlarge
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    availability_zone: (( grab properties.aws.availability_zone ))

disk_pools:
- name: riemann
  disk_size: 30_000
  cloud_properties:
    encrypted: true
- name: influxdb
  disk_size: 500_000
  cloud_properties:
    encrypted: true

compilation:
  network: monitoring
  reuse_compilation_vms: true
  workers: 4
  cloud_properties:
    instance_type: m3.xlarge
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    availability_zone: (( grab properties.aws.availability_zone ))

update:
  canaries: 1
  canary_watch_time: 1000-300000
  max_in_flight: 50
  serial: false
  update_watch_time: 1000-300000
