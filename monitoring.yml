meta:
  uaa-alert:
    ops:
      url: (( param "specify ops uaa url" ))
      client_id: (( param "specify ops uaa client id" ))
      client_secret: (( param "specify ops uaa client secret" ))
    client:
      url: (( param "specify client uaa url" ))
      client_id: (( param "specify client uaa client id" ))
      client_secret: (( param "specify client uaa client secret" ))

releases:
- name: grafana
  version: latest
- name: influxdb
  version: latest
- name: riemann
  version: latest
- name: cron
  version: latest
- name: secureproxy
  version: latest

networks:
- name: monitoring
  type: manual
  subnets:
  - cloud_properties:
      subnet: (( grab meta.subnet ))
      security_groups:
      - (( grab meta.security_group ))

jobs:
- name: monitoring
  templates:
  - {name: grafana, release: grafana}
  - {name: riemann, release: riemann}
  - {name: cron, release: cron}
  - {name: secureproxy, release: secureproxy}

  instances: 1
  resource_pool: riemann_z1
  persistent_disk_pool: riemann
  networks:
  - name: monitoring
    static_ips: (( static_ips(0) ))

  properties:
    secureproxy:
      listen_port: 3000
      proxy_port: 3001

    cron:
      variables:
        AWS_DEFAULT_REGION: (( grab properties.aws.default_region ))
      entries:
      - script:
          name: check_awslogs.sh
          contents: (( file "cronjobs/check_awslogs.sh" ))
        lock: /var/vcap/sys/run/cron/check_awslogs.lock
        variables:
          HEARTBEAT_GROUP: /var/log/syslog
          TTL: 900
        minute: '*/10'
        hour: '*'
        day: '*'
        month: '*'
        wday: '*'
        user: root
      - script:
          name: audit_tokens.sh
          contents: (( file "cronjobs/audit_tokens.sh" ))
        variables:
          UAA_URL: (( grab meta.uaa-alert.ops.url ))
          UAA_CLIENT_ID: (( grab meta.uaa-alert.ops.client_id ))
          UAA_CLIENT_SECRET: (( grab meta.uaa-alert.ops.client_secret ))
        lock: /var/vcap/sys/run/cron/audit_tokens_opslogin.lock
        minute: '0'
        hour: '*'
        day: '*'
        month: '*'
        wday: '*'
        user: root
      - script:
          name: audit_tokens.sh
          contents: (( file "cronjobs/audit_tokens.sh" ))
        variables:
          UAA_URL: (( grab meta.uaa-alert.client.url ))
          UAA_CLIENT_ID: (( grab meta.uaa-alert.client.client_id ))
          UAA_CLIENT_SECRET: (( grab meta.uaa-alert.client.client_secret ))
        lock: /var/vcap/sys/run/cron/audit_tokens_client.lock
        minute: '0'
        hour: '*'
        day: '*'
        month: '*'
        wday: '*'
        user: root

- name: influxdb
  templates:
  - {name: influxdb, release: influxdb}

  instances: 1
  resource_pool: xlarge_z1
  persistent_disk_pool: influxdb
  networks:
  - name: monitoring
    static_ips: (( static_ips(1) ))

  properties:
    influxdb:
      retention: "180d"
    cron:
      variables:
        AWS_DEFAULT_REGION: (( grab properties.aws.default_region ))
        S3_BUCKET_NAME: (( grab meta.influxdb_bucket_name ))
        INFLUX_DB_NAME: (( grab properties.influxdb.database ))
      entries:
      - script:
          name: influx_backup.sh
          contents: (( file "cronjobs/influx_backup.sh" ))
        minute: 0
        hour: 0
        day: '*'
        month: '*'
        wday: '*'
        user: root

properties:
  grafana:
    listen_port: 3001
    session:
      cookie_secure: "true"
    auth:
      generic_oauth:
        enabled: true
        allow_sign_up: true
        scopes: [openid,metrics.read]
    datasources:
    - type: "influxdb"
      database: (( grab properties.influxdb.database ))
      url: (( concat "http://" jobs.influxdb.networks.monitoring.static_ips.[0] ":8086" ))
      name: (( grab properties.influxdb.name ))
      user: (( grab properties.influxdb.user ))
      password: (( grab properties.influxdb.password ))
      isDefault: true
    dashboards:
    - name: all-in-one-cf-components-dashboard
      content: (( file "dashboards/all-in-one-cf-components-dashboard.json" ))
    - name: cloud-controller
      content: (( file "dashboards/cloud-controller.json" ))
    - name: dea
      content: (( file "dashboards/dea.json" ))
    - name: diego
      content: (( file "dashboards/diego.json" ))
    - name: doppler-server
      content: (( file "dashboards/doppler-server.json" ))
    - name: gorouter
      content: (( file "dashboards/gorouter.json" ))
    - name: metron-agent
      content: (( file "dashboards/metron-agent.json" ))
    - name: syslog
      content: (( file "dashboards/syslog.json" ))
    - name: traffic-controller
      content: (( file "dashboards/traffic-controller.json" ))
    - name: uaa
      content: (( file "dashboards/uaa.json" ))
    - name: etcd
      content: (( file "dashboards/etcd.json" ))
    - name: concourse
      content: (( file "dashboards/concourse.json" ))
    - name: atypical
      content: (( file "dashboards/atypical.json" ))
    - name: k8s-cluster
      content: (( file "dashboards-tmp/cluster.json" ))
    - name: k8s-pods
      content: (( file "dashboards-tmp/pods.json" ))

  riemann:
    java:
      xmx: 2048m
    memory:
      overrides:
      - host: '^queue.\d+'
        threshold: 50
        state: critical
        description: 'Log data is not reaching ElasticSearch! See: https://cloud.gov/docs/ops/runbook/troubleshooting-logsearch/#debugging-queue-memory-usage'
      - host: '^queue.\d+'
        threshold: 25
        state: warn
        description: 'Log data is not reaching ElasticSearch! See: https://cloud.gov/docs/ops/runbook/troubleshooting-logsearch/#debugging-queue-memory-usage'
    swap:
      critical: 25
      warn: 10
    disk:
      critical: 80
      warn: 75
    influxdb:
      host: (( grab jobs.influxdb.networks.monitoring.static_ips.[0] ))
      username: (( grab properties.influxdb.user ))
      password: (( grab properties.influxdb.password ))
      database: (( grab properties.influxdb.database ))
      port: 8086
    # CloudWatch Log Group timestamps may be delayed by up to an hour or more:
    # https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_LogStream.html#CWL-Type-LogStream-lastEventTimestamp
    awslogs:
      metrics:
      - service: awslogs.kubernetes
        threshold: 3600
      - service: awslogs._GLOBAL
        threshold: 300
    nologs:
      alert_threshold: 3600
      stop_threshold: 5400

resource_pools:
- name: riemann_z1
  network: monitoring
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: latest
  cloud_properties:
    iam_instance_profile: (( grab terraform_outputs.riemann_monitoring_profile ))
    instance_type: t2.medium
    elbs:
    - (( grab meta.elb_name ))
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    availability_zone: (( grab properties.aws.availability_zone ))
- name: xlarge_z1
  network: monitoring
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: latest
  cloud_properties:
    iam_instance_profile: (( grab terraform_outputs.influxdb_monitoring_profile ))
    instance_type: r4.4xlarge
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    availability_zone: (( grab properties.aws.availability_zone ))

disk_pools:
- name: riemann
  disk_size: 5_000
  cloud_properties:
    encrypted: true
- name: influxdb
  disk_size: 175_000
  cloud_properties:
    encrypted: true

compilation:
  network: monitoring
  reuse_compilation_vms: true
  workers: 4
  cloud_properties:
    instance_type: m3.xlarge
    ephemeral_disk:
      size: 30000
      type: gp2
      encrypted: true
    iam_instance_profile: (( grab terraform_outputs.bosh_compilation_profile ))
    availability_zone: (( grab properties.aws.availability_zone ))

update:
  canaries: 1
  canary_watch_time: 1000-300000
  max_in_flight: 50
  serial: false
  update_watch_time: 1000-300000
