---
jobs:
- name: deploy-monitoring-staging
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: monitoring-config
      trigger: true
    - get: common
      resource: common-staging
      trigger: true
    - get: pipeline-tasks
    - get: riemann-release
      trigger: true
    - get: influxdb-release
      trigger: true
    - get: secureproxy-release
      trigger: true
    - get: grafana-release
      trigger: true
    - get: monitoring-stemcell
      trigger: true
    - get: terraform-yaml
      trigger: true
  - task: monitoring-manifest
    config: &manifest-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: monitoring-config
      - name: terraform-yaml
      - name: common
      outputs:
      - name: monitoring-manifest
      run:
        path: sh
        args:
        - -exc
        - |
          monitoring-config/generate-manifest.sh \
            monitoring-config/monitoring-staging.yml \
            terraform-yaml/state.yml \
            common/secrets.yml \
            > monitoring-manifest/manifest.yml
  - &lint-manifest
    task: lint-manifest
    file: pipeline-tasks/lint-manifest.yml
    input_mapping:
      pipeline-config: monitoring-config
      lint-manifest: monitoring-manifest
    params:
      LINTER_CONFIG: bosh-lint.yml
  - put: monitoring-staging-deployment
    params: &deploy-params
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: monitoring-manifest/manifest.yml
      releases:
      - riemann-release/*.tgz
      - influxdb-release/*.tgz
      - secureproxy-release/*.tgz
      - grafana-release/*.tgz
      stemcells:
      - monitoring-stemcell/*.tgz
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy monitoring on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed monitoring on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-monitoring-production
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: monitoring-staging-deployment
      passed: [deploy-monitoring-staging]
    - get: monitoring-config
      passed: [deploy-monitoring-staging]
      trigger: true
    - get: common
      resource: common-production
      trigger: true
    - get: pipeline-tasks
      passed: [deploy-monitoring-staging]
    - get: riemann-release
      passed: [deploy-monitoring-staging]
    - get: influxdb-release
      passed: [deploy-monitoring-staging]
    - get: secureproxy-release
      passed: [deploy-monitoring-staging]
    - get: grafana-release
      passed: [deploy-monitoring-staging]
    - get: monitoring-stemcell
      passed: [deploy-monitoring-staging]
      trigger: true
    - get: terraform-yaml
      trigger: true
  - task: monitoring-manifest
    config:
      <<: *manifest-config
      run:
        path: sh
        args:
        - -exc
        - |
          monitoring-config/generate-manifest.sh \
            monitoring-config/monitoring-production.yml \
            terraform-yaml/state.yml \
            common/secrets.yml \
            > monitoring-manifest/manifest.yml
  - *lint-manifest
  - put: monitoring-production-deployment
    params: *deploy-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy monitoring on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed monitoring on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

resources:
- name: master-bosh-root-cert
  type: s3-iam
  source:
    bucket: {{monitoring-production-private-bucket}}
    region_name: {{aws-region}}
    versioned_file: master-bosh.crt

- name: common-staging
  type: cg-common
  source:
    region: {{monitoring-staging-private-region}}
    bucket_name: {{monitoring-staging-private-bucket}}
    secrets_file: monitoring-staging.yml
    secrets_passphrase: {{monitoring-staging-private-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: common-production
  type: cg-common
  source:
    region: {{monitoring-production-private-region}}
    bucket_name: {{monitoring-production-private-bucket}}
    secrets_file: monitoring-production.yml
    secrets_passphrase: {{monitoring-production-private-passphrase}}
    bosh_cert: bosh-tooling.pem

- name: influxdb-release
  type: bosh-io-release
  source:
    repository: vito/influxdb-boshrelease

- name: riemann-release
  type: s3-iam
  source:
    region_name: {{s3-bosh-releases-region}}
    bucket: {{s3-bosh-releases-bucket}}
    private: true
    regexp: riemann-(.*).tgz

- name: secureproxy-release
  type: s3-iam
  source:
    region_name: {{s3-bosh-releases-region}}
    bucket: {{s3-bosh-releases-bucket}}
    private: true
    regexp: secureproxy-(.*).tgz

# TODO: Restore upstream release after https://github.com/vito/grafana-boshrelease/pull/19 is accepted.
- name: grafana-release
  # type: bosh-io-release
  # source:
  #   repository: vito/grafana-boshrelease
  type: s3-iam
  source:
    region_name: {{s3-bosh-releases-region}}
    bucket: {{s3-bosh-releases-bucket}}
    private: true
    regexp: grafana-(.*).tgz

- name: monitoring-config
  type: git
  source:
    uri: {{cg-deploy-monitoring-git-url}}
    branch: {{cg-deploy-monitoring-git-branch}}

- name: monitoring-stemcell
  type: s3-iam
  source:
    bucket: cg-stemcell-images
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz
    region_name: us-gov-west-1

- name: monitoring-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{monitoring-staging-deployment-bosh-target}}
    client_id: {{monitoring-staging-deployment-bosh-client-id}}
    client_secret: {{monitoring-staging-deployment-bosh-client-secret}}
    deployment: {{monitoring-staging-deployment-bosh-deployment}}
    ignore_ssl: false

- name: monitoring-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{monitoring-production-deployment-bosh-target}}
    client_id: {{monitoring-production-deployment-bosh-client-id}}
    client_secret: {{monitoring-production-deployment-bosh-client-secret}}
    deployment: {{monitoring-production-deployment-bosh-deployment}}
    ignore_ssl: false

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

- name: terraform-yaml
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-tooling}}
    versioned_file: {{tf-state-file-tooling}}
    region_name: {{aws-region}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource
